name: CI/CD Backend

#on:
#  pull_request:
#    branches:
#      - release
#    types:
#      - closed
on:
  push:
    branches:
      - main

jobs:
  increment-version:
    #if: ${{ github.event.pull_request.merged }}
    runs-on: ubuntu-latest
    outputs:
      app-version: ${{ steps.increment-version.outputs.app-version }}
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - name: Set up XMLStarlet
        run: sudo apt-get install -y xmlstarlet
      
      # Incrementa a versão do software
      - name: Increment app version, commit and push changes
        working-directory: codigo-fonte/backend/api
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        id: increment-version
        run: |
          POM_FILE="pom.xml"

          # Extrai a versão atual considerando o namespace Maven
          currentVersion=$(xmlstarlet sel -N x="http://maven.apache.org/POM/4.0.0" -t -v "/x:project/x:version" "$POM_FILE")
          
          if [[ -z "$currentVersion" ]]; then
            echo "Erro: versão não encontrada no pom.xml"
            exit 1
          fi
          
          echo "Versão atual: $currentVersion"
          
          # Remove o sufixo "-SNAPSHOT" e incrementa o patch
          numericVersion="${currentVersion%-SNAPSHOT}"
          IFS='.' read -r major minor patch <<< "$numericVersion"
          
          patch=$((patch + 1))
          newVersion="${major}.${minor}.${patch}-SNAPSHOT"
          
          echo "Nova versão: $newVersion"
          
          # Atualiza o campo <version> no pom.xml
          xmlstarlet ed -L \
            -N x="http://maven.apache.org/POM/4.0.0" \
            -u "/x:project/x:version" \
            -v "$newVersion" "$POM_FILE"
          
          # Define a nova versão como saída para o GitHub Actions
          echo "app-version=$newVersion" >> $GITHUB_OUTPUT

          # Commit e push das alterações
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add $POM_FILE
          git commit -m "DEPLOY BACKEND - v${newVersion}"
          git push origin

#  cherry-pick-to-main:
#    needs: increment-version
#    runs-on: ubuntu-latest
#    permissions:
#      contents: write
#    steps:
#      - name: Checkout the repo
#        uses: actions/checkout@v4
#        with:
#          fetch-depth: 0
#
#      - name: Configure Git
#        run: |
#          git config user.name "GitHub Actions"
#          git config user.email "actions@github.com"
#
#      - name: Cherry-pick last commit to main
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        run: |
#          git checkout main
#          git pull origin main
#
#          # Pega o último commit da branch
#          git checkout release
#          git pull origin release
#          LAST_COMMIT=$(git rev-parse HEAD)
#
#          git checkout main
#          git cherry-pick $LAST_COMMIT
#
#          # Push para a main
#          git push origin main
#
  build-and-deploy:
    runs-on: ubuntu-latest
    needs: increment-version
    env:
      version: ${{ needs.increment-version.outputs.app-version }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Fetch and pull latest changes from origin
        run: |
          git fetch origin
          git pull origin main

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Build Spring Boot application
        working-directory: codigo-fonte/backend/api
        run: mvn clean package -DskipTests

      - name: Remove JAR via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST_SSH_IP }}
          username: ${{ secrets.HOST_SSH_USER }}
          key: ${{ secrets.HOST_SSH_KEY }}
          script: |
            echo "Removendo qualquer api-*.jar da pasta /home"
            rm -f /home/api-*.jar
      
      - name: Set up SSH key
        working-directory: codigo-fonte/backend/api
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.HOST_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: Upload Spring Boot jar via SCP
        working-directory: codigo-fonte/backend/api
        run: |
          VERSION=${{ env.version }}
          sshpass -p "${{ secrets.HOST_SSH_KEY }}" scp -o StrictHostKeyChecking=no "target/api-${VERSION}.jar" "${{ secrets.HOST_SSH_USER }}@${{ secrets.HOST_SSH_IP }}:/home/api-${VERSION}.jar"
      
      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST_SSH_IP }}
          username: ${{ secrets.HOST_SSH_USER }}
          key: ${{ secrets.HOST_SSH_KEY }}
          script: |
            VERSION=${{ env.version }}
            echo "Parando backend em execução..."
            pid=$(ps aux | grep '[j]ava' | awk '{print $2}')
            if [ -n "$pid" ]; then
              kill $pid
              echo "Processo $pid finalizado."
            else
              echo "Nenhum processo Java encontrado."
            fi

            echo "Executando nova versão..."
            nohup java -jar "/home/api-${VERSION}.jar" > /home/output.log 2>&1 &
            echo "API iniciada com sucesso."